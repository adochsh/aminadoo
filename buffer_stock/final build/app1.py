import pandas as pd
import streamlit as st
from st_aggrid import AgGrid, GridOptionsBuilder,GridUpdateMode,DataReturnMode
from st_aggrid.shared import JsCode
from st_aggrid.grid_options_builder import GridOptionsBuilder
import cx_Oracle
import os
import platform
from datetime import datetime
from datetime import timedelta
from io import BytesIO
from pyxlsb import open_workbook as open_xlsb
import recommend_sql

##### –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–æ–º–ø—å—é—Ç–µ—Ä–µ (—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–æ–º –æ—Ä–∞–∫–ª–∞)
# if platform.system() == "Darwin":
#     cx_Oracle.init_oracle_client(lib_dir=os.environ.get("HOME")+"/Downloads/instantclient_19_8")

# GET OS ENV KEYS
host = os.environ['DB_HOST'] OR nxlrd1-scan1.int.adeo.com
userdb = os.environ['DB_USER']
passwordb = os.environ['DB_PASS']
service_namedb = os.environ['DB_SERV']

st.set_page_config(page_title="REPL", page_icon=None, layout="wide")
sql = recommend_sql.script

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞ –≤ –ë–î
@st.experimental_memo(ttl=6000,suppress_st_warning=True)
def select(sql):
    try:
        dsn = cx_Oracle.makedsn(host, 1521, service_name=service_namedb)
        con = cx_Oracle.connect(user=userdb, password=passwordb, dsn=dsn,encoding="UTF-8")
        cursor = con.cursor()
    except cx_Oracle.DatabaseError as e:
        st.write("There is a problem with Connection to Oracle ", e)

    df = pd.read_sql(sql, con)

    t = datetime.now().strftime("%H:%M:%S")[0:5]
    st.write('–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {}'.format(t))
    return df

###–°–ª–æ–∂–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
def aggrid_interactive_table(df: pd.DataFrame, reload_data):
    """Creates an st-aggrid interactive table based on a dataframe.
    Args:
    df (pd.DataFrame]): Source dataframe
    Returns:
    dict: The selected row
    """
    cellsytle_jscode = JsCode(
    """function(params) {
            if (params.value > 0) {
                return {
                    'color': 'white',
                    'backgroundColor': 'red'
                }
            } else if (params.value < 0) {
                return {
                    'color': 'white',
                    'backgroundColor': 'crimson'
                }
            } else {
                return {
                    'color': 'white',
                    'backgroundColor': 'light' } } }; """
    )
    cellsytle_jscode2 = JsCode(
    """function(params) {
            if (params.value === 0) {
                return {
                    'color': 'white',
                    'backgroundColor': 'green'
                }
            } else if (params.value < 14) {
                return {
                    'color': 'red',
                    'backgroundColor': 'light'
                }
            } else {
                return {
                    'color': 'black',
                    'backgroundColor': 'light' } } }; """
    )

    options = GridOptionsBuilder.from_dataframe( df, enableRowGroup=True, enableValue=True, enablePivot=True )
    options.configure_column('–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç', cellStyle=cellsytle_jscode )
    options.configure_column('–°—Ç–æ–∫ –Ω–∞ 922, –¥–Ω–∏', cellStyle=cellsytle_jscode2 )
    # options.configure_column('–†–µ–∑–µ—Ä–≤—ã', editable = True)
    # options.configure_column('–°—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ 921', pinned = True)

    options.configure_side_bar()
    options.configure_selection("single")
    selection = AgGrid(
        df,
        enable_enterprise_modules=True,
        gridOptions=options.build(),
        #theme ="light", #fresh , 'streamlit', 'light', 'dark', 'blue', 'fresh', 'material'
        # update_mode =GridUpdateMode.MANUAL,#GridUpdateMode.MODEL_CHANGED,
        allow_unsafe_jscode=True,
        reload_data=reload_data,
        )
    # if reload_data:
    #     st.write('aggrid reloaded!')
    return selection

# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤ —ç–∫—Å–µ–ª—å
@st.cache(suppress_st_warning=True)
def to_excel(df):
    output = BytesIO()
    writer = pd.ExcelWriter(output, engine='xlsxwriter')
    df.to_excel(writer, sheet_name='Sheet1')
    workbook = writer.book
    worksheet = writer.sheets['Sheet1']
    format1 = workbook.add_format({'num_format': '0.00'})
    worksheet.set_column('A:A', None, format1)
    writer.save()
    processed_data = output.getvalue()
    return processed_data

i =[12346148, 82025672, 15369311, 82135561, 82135581, 12657210, 15607438]
l =[3,5,32,35,51,56,86,6,20,26, 117]

reload_data = False
items = ",".join(str(i) for i in i)
locs = ",".join(str(i) for i in l)

with st.sidebar.form("Update"):
    submit_button = st.form_submit_button(label='–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ')

# –ó–∞–ø—É—Å–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ñ–æ–º–∏—Ä–æ–≤–∞–Ω–∏—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—É—à–∞
to_df = sql.format(items,locs,items,locs,locs)
df = select(to_df)

# –û–±–Ω—É–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≥–¥–µ —Å—Ç–æ–∫ –Ω–∞ —Å–∫–ª–∞–¥–µ —É–∂–µ —Ä–∞–∑–≥—Ä—É–∂–µ–Ω
df.loc[(df.STOCKDAYS_WH922==0), 'PUSH_QTY_ROUND'] = 0
df['ALERT'] = df['ALERT'].astype(str)
# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
df = df.fillna(0).rename(columns={'PUSH_QTY_RAW': "–ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç"
                               , 'PUSH_QTY_ROUND':'–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç'
                               , 'STORE':'–ú–∞–≥–∞–∑–∏–Ω', 'ITEM':'–ê—Ä—Ç–∏–∫—É–ª', 'SUPPLIER':'–ö–æ–¥ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞'
                               , 'STOCK_WH922':'–°—Ç–æ–∫ –Ω–∞ 922, —à—Ç', 'STOCKDAYS_WH922':'–°—Ç–æ–∫ –Ω–∞ 922, –¥–Ω–∏'
                               , 'STOCK_DAYS':'–°—Ç–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω–∏'
                               , 'STOCK_DAYS_CURR':'–°—Ç–æ–∫ —Ç–µ–∫—É—â–∏–π, –¥–Ω–∏'
                               , 'TRANSIT_STOCK_DAYS':'C—Ç–æ–∫ –≤ –ø—É—Ç–∏, –¥–Ω–∏'
                               , 'FOULIBL':'–ü–æ—Å—Ç–∞–≤—â–∏–∫' , 'CNT_ORDERS':'–ó–∞–∫–∞–∑—ã —Ç–µ–∫—É—â.', 'QTY_IN_TRANSIT':'–¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏'
                               , 'D1_DAYS_FROM_NOW':'–°—Ä–æ–∫ –¥–æ –±–ª–∏–∂. –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏'
                               , 'D2D1_DIFF_DAYS':'–°—Ä–æ–∫ –º–µ–∂–¥—É –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏'
                               , 'AVG_DAILY_FRCST':'–°–î–ü–ü', 'AVG_FOR_ALL_STORES':'–°–î–ü–ü –ø–æ —Å–µ—Ç–∏'
                               , 'STOCK_STORE':'–°—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π, —à—Ç'
                               , 'QTY_TRANSFERS':'–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω', 'RESERVS':'–†–µ–∑–µ—Ä–≤—ã'
                               , 'FRCST_FROM_NOW_TO_D1':'–°—É–º–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂ (–¥–æ –±–ª–∏–∂. –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏)'
                               , 'ROUND_LVL':'–£—Ä–æ–≤–µ–Ω—å PCB', 'SUPP_PACK_SIZE':'–ö–æ—Ä–æ–±–∫–∞, —à—Ç'
                               , 'PAL_VAL':'–ü–∞–ª–ª–µ—Ç–∞, —à—Ç'
                               })
df = df[['–ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç', '–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç', 'ALERT','–°—Ç–æ–∫ –Ω–∞ 922, –¥–Ω–∏','–°—Ç–æ–∫ –Ω–∞ 922, —à—Ç', 'FACT_STOCK_WH922', 'RESERV_WH', 'NON_SELLABLE_QTY'
        , '–ê—Ä—Ç–∏–∫—É–ª','–ú–∞–≥–∞–∑–∏–Ω','–ö–æ–¥ –ü–æ—Å—Ç–∞–≤—â–∏–∫–∞', '–°—Ç–æ–∫ –Ω–∞ –º–æ–º–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏, –¥–Ω–∏', '–°—Ç–æ–∫ —Ç–µ–∫—É—â–∏–π, –¥–Ω–∏'
        , '–°—Ä–æ–∫ –¥–æ –±–ª–∏–∂. –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏', '–°—Ä–æ–∫ –º–µ–∂–¥—É –¥–æ—Å—Ç–∞–≤–∫–∞–º–∏',  'C—Ç–æ–∫ –≤ –ø—É—Ç–∏, –¥–Ω–∏', 'SAFETY_DAYS'
        , '–°–î–ü–ü', '–°–î–ü–ü –ø–æ —Å–µ—Ç–∏', '–°—É–º–º–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø—Ä–æ–¥–∞–∂ (–¥–æ –±–ª–∏–∂. –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏)'
        , '–°—Ç–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π, —à—Ç', '–¢—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –≤ –º–∞–≥–∞–∑–∏–Ω', '–¢–æ–≤–∞—Ä –≤ –ø—É—Ç–∏', '–†–µ–∑–µ—Ä–≤—ã', 'RESERV_QTY', 'RESERV_DAYS'
        , '–ü–æ—Å—Ç–∞–≤—â–∏–∫', '–ó–∞–∫–∞–∑—ã —Ç–µ–∫—É—â.', 'MIN_ORDER_DATE', 'MIN_DELIVERY_DATE', 'MAX_DELIVERY_DATE', 'PLAN_ORD_DATE', 'PLAN_DELIV_DATE'
        , '–£—Ä–æ–≤–µ–Ω—å PCB', '–ö–æ—Ä–æ–±–∫–∞, —à—Ç', '–ü–∞–ª–ª–µ—Ç–∞, —à—Ç' ]].sort_values(by=['–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç'], ascending=False)

reload_data=True
selection = aggrid_interactive_table(df, reload_data)
#### –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∫ —Ñ–æ—Ä–º–∞—Ç—É –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–∞ –≤ —Ä–º—Å
tf= df[df['–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç']>0][['–ê—Ä—Ç–∏–∫—É–ª','–ú–∞–≥–∞–∑–∏–Ω','–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç']].copy().rename(columns={'–ê—Ä—Ç–∏–∫—É–ª':'–ö–æ–¥ –õ–ú', '–ú–∞–≥–∞–∑–∏–Ω':'–ü–æ–ª—É—á–∞—Ç–µ–ª—å' })
tf['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å'] = 922
tf['–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'] =(pd.to_datetime("today").normalize() + timedelta(days=2)).strftime("%d-%m-%Y")
tf['–¢–∏–ø –ª–æ–≥–∏—Å—Ç. –ø–æ—Ç–æ–∫–∞'] = ''
tf['–£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä'] = ''

#### transform to pivot
tf = tf[['–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å','–ü–æ–ª—É—á–∞—Ç–µ–ª—å','–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏','–¢–∏–ø –ª–æ–≥–∏—Å—Ç. –ø–æ—Ç–æ–∫–∞','–£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä','–ö–æ–¥ –õ–ú','–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç']]
tf = tf.pivot(index ='–ö–æ–¥ –õ–ú' , columns =[ '–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', '–î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏', '–¢–∏–ø –ª–æ–≥–∏—Å—Ç. –ø–æ—Ç–æ–∫–∞','–£—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä']
                              , values ='–û–∫—Ä—É–≥–ª. –ü—Ä–µ–¥–ª. –¥–ª—è –ø—É—à–∞, —à—Ç').fillna(0)
#### transform to EXCEL to download
df_xlsx = to_excel(tf)
st.download_button(label='üì• –°–∫–∞—á–∞—Ç—å –≤ –≤–∏–¥–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è —Ç—Ä–∞–Ω—Å—Ñ–µ—Ä–æ–≤',
                                data=df_xlsx ,
                                file_name= 'df_test.xlsx')
